// Data Cleansing 

SELECT 
    week_date,
    DATEPART(WEEK, week_date) AS week_number,
    DATEPART(MONTH, week_date) AS month_number,
    DATEPART(YEAR, week_date) AS calendar_year,
    region, 
    platform, 
    CASE
        WHEN segment IS NULL THEN 'Unknown'
        ELSE segment
    END AS segment,
    CASE
        WHEN RIGHT(segment, 1) = '1' THEN 'Young Adults'
        WHEN RIGHT(segment, 1) = '2' THEN 'Middle Aged'
        WHEN RIGHT(segment, 1) = '3' THEN 'Retirees'
        WHEN RIGHT(segment, 1) = '4' THEN 'Retirees'
        ELSE 'Unknown'
    END AS age_band,
    CASE
        WHEN LEFT(segment, 1) = 'f' THEN 'Families'
        WHEN LEFT(segment, 1) = 'c' THEN 'Couples'
        ELSE 'Unknown'
    END AS demographic,
    customer_type, 
    transactions, 
    sales,
    ROUND(sales/transactions, 2) AS avg_transaction
INTO 
    clean_weekly_sales
FROM 
    weekly_sales;


select top 10 * from clean_weekly_sales

// Data Exploration

CREATE TABLE seq100
(
    x INT NOT NULL IDENTITY(1,1) PRIMARY KEY
);

-- Enable identity insert
SET IDENTITY_INSERT seq100 ON;

-- Insert values
INSERT INTO seq100 (x)
SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
FROM master.dbo.spt_values
WHERE type = 'P' AND number BETWEEN 1 AND 100;

-- Disable identity insert
SET IDENTITY_INSERT seq100 OFF;

/*
insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 select x + 50 from seq100;
*/

select * from seq100;

select top 52 * 
into seq52
from seq100

select * from seq52

--1. Which week numbers are missing from the dataset?
select distinct x from seq52 
where x not in (select distinct week_number from clean_weekly_sales)

--2. How many total transactions were there for each year in the dataset?
select calendar_year, sum(transactions) as total_transaction
from clean_weekly_sales
group by calendar_year

ALTER TABLE clean_weekly_sales
ALTER COLUMN sales BIGINT;

--3. What are the total sales for each region for each month?
select region, month_number, sum(sales) as total_sales
from clean_weekly_sales
group by month_number, region

--4. What is the total count of transactions for each platform
select platform, count(transactions)
from clean_weekly_sales
group by platform

--5. What is the percentage of sales for Retail vs Shopify for each month?
WITH cte_monthly_platform_sales AS (
  SELECT
    month_number,
    calendar_year,
    platform,
    SUM(sales) AS monthly_sales
  FROM clean_weekly_sales
  GROUP BY month_number, calendar_year, platform
)
SELECT
  month_number,
  calendar_year,
  ROUND(
    100 * SUM(CASE WHEN platform = 'Retail' THEN monthly_sales ELSE 0 END) /
      SUM(monthly_sales),
    2
  ) AS retail_percentage,
  ROUND(
    100 * SUM(CASE WHEN platform = 'Shopify' THEN monthly_sales ELSE 0 END) /
      SUM(monthly_sales),
    2
  ) AS shopify_percentage
FROM cte_monthly_platform_sales
GROUP BY month_number, calendar_year
ORDER BY month_number, calendar_year;



--6. What is the percentage of sales by demographic for each year in the dataset?

SELECT
  calendar_year,
  demographic,
  SUM(SALES) AS yearly_sales,
  ROUND(
    (
      100 * SUM(sales)/
        SUM(SUM(SALES)) OVER (PARTITION BY demographic)
    ),
    2
  ) AS percentage
FROM clean_weekly_sales
GROUP BY
  calendar_year,
  demographic
ORDER BY
  calendar_year,
  demographic;

--7. Which age_band and demographic values contribute the most to Retail sales
SELECT age_band, demographic, SUM(sales) AS total_sales
FROM clean_weekly_sales
WHERE platform = 'Retail'
GROUP BY age_band, demographic
ORDER BY total_sales DESC;